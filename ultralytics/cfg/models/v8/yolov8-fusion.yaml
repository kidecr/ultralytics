# Ultralytics YOLO 🚀, AGPL-3.0 license
# YOLOv8 object detection model with P3-P5 outputs. For Usage examples see https://docs.ultralytics.com/tasks/detect

# Parameters
nc: 1 # number of classes
ch: 4 # input channel(default 3)

scales: # model compound scaling constants, i.e. 'model=yolov8n.yaml' will call yolov8.yaml with scale 'n'
  # [depth, width, max_channels]
  n: [0.33, 0.25, 1024] # YOLOv8n summary: 225 layers,  3157200 parameters,  3157184 gradients,   8.9 GFLOPs
  s: [0.33, 0.50, 1024] # YOLOv8s summary: 225 layers, 11166560 parameters, 11166544 gradients,  28.8 GFLOPs
  m: [0.67, 0.75, 768] # YOLOv8m summary: 295 layers, 25902640 parameters, 25902624 gradients,  79.3 GFLOPs
  l: [1.00, 1.00, 512] # YOLOv8l summary: 365 layers, 43691520 parameters, 43691504 gradients, 165.7 GFLOPs
  x: [1.00, 1.25, 512] # YOLOv8x summary: 365 layers, 68229648 parameters, 68229632 gradients, 258.5 GFLOPs

scale: 'n'

# YOLOv8.0n backbone
backbone:
  # [from, repeats, module, args]
  # - [-1, 1, SplitInputImage, [0, 3]] # args: ch_out from_channel to_channel
  # - [[-1, 2], 1, FusionTransformerDecoder, [16, 3]] # args: patch_size, d_model, n_head, n_layer
  # - [-1, 1, Conv, [64, 3, 2]] # 0-P1/2 args: out_channel, kernel_size stride
  # - [-1, 3, C2f, [128, True]] args: ch_out, shortcut, groups
  - [-1, 1, nn.Identity, []] # layer0 直出
  - [0, 1, SplitInputImage, [3, 0, 3]] # layer1 获得RGB部分
  - [0, 1, SplitInputImage, [1, 3, 4]] # layer2 获得IR部分

  # RGB的backbone
  - [1, 1, Conv, [64, 3, 2]] # 0-P1/2         # layer3 从layer1接收RGB输入
  - [-1, 1, Conv, [128, 3, 2]] # 1-P2/4       # layer4
  - [-1, 3, C2f, [128, True]]                 # layer5
  - [-1, 1, Conv, [256, 3, 2]] # 3-P3/8       # layer6
  - [-1, 6, C2f, [256, True]] # 该层为b输出到B # layer7
  - [-1, 1, Conv, [512, 3, 2]] # 5-P4/16      # layer8
  - [-1, 6, C2f, [512, True]] # 该层为a输出到A # layer9
  - [-1, 1, Conv, [1024, 3, 2]] # 7-P5/32     # layer10
  - [-1, 3, C2f, [1024, True]]                # layer11
  - [-1, 1, SPPF, [1024, 5]] # 9 # 该层为d输出到D # layer12

  # IR的backbone
  - [2, 1, Conv, [64, 3, 2]] # 0-P1/2         # layer13 从layer2接收IR输入
  - [-1, 1, Conv, [128, 3, 2]] # 1-P2/4       # layer14
  - [-1, 3, C2f, [128, True]]                 # layer15
  - [-1, 1, Conv, [256, 3, 2]] # 3-P3/8       # layer16
  - [-1, 6, C2f, [256, True]] # 该层为b输出到B # layer17
  - [-1, 1, Conv, [512, 3, 2]] # 5-P4/16      # layer18
  - [-1, 6, C2f, [512, True]] # 该层为a输出到A # layer19
  - [-1, 1, Conv, [1024, 3, 2]] # 7-P5/32     # layer20
  - [-1, 3, C2f, [1024, True]]                # layer21
  - [-1, 1, SPPF, [1024, 5]] # 9 # 该层为d输出到D # layer22

  # 融合模块                                                                   # input size bxcx640x640
  - [[7, 17], 1, FusionTransformerDecoder, [8, 64, 8, 1]] # layer23 对应b-B  # bx64x80x80
  - [[9, 19], 1, FusionTransformerDecoder, [8, 64, 8, 1]]  # layer24 对应a-A  # bx128x40x40
  - [[12, 22], 1, FusionTransformerDecoder, [4, 16, 8, 1]] # layer25 对应d-D  # bx256x20x20
  # - [[7, 17], 1, Add, []] # layer23 对应b-B  # bx64x80x80
  # - [[9, 19], 1, Add, []]  # layer24 对应a-A  # bx128x40x40
  # - [[12, 22], 1, Add, []] # layer25 对应d-D  # bx256x20x20

# YOLOv8.0n head
head:
  - [25, 1, nn.Upsample, [None, 2, "nearest"]] # 从d输入              # layer26
  - [[-1, 24], 1, Concat, [1]] # cat backbone P4 # 该层为A输入为a     # layer27
  - [-1, 3, C2f, [512]] # 12 # 该层为c输出到C                         # layer28

  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]                        # layer29
  - [[-1, 23], 1, Concat, [1]] # cat backbone P3 # 该层为B输入为b      # layer30
  - [-1, 3, C2f, [256]] # 15 (P3/8-small)  # 输出到Detect             # layer31

  - [-1, 1, Conv, [256, 3, 2]]                                       # layer32
  - [[-1, 28], 1, Concat, [1]] # cat head P4 # 该层为C出入为c         # layer33
  - [-1, 3, C2f, [512]] # 18 (P4/16-medium) # 输出到Detect           # layer34

  - [-1, 1, Conv, [512, 3, 2]]                                      # layer35
  - [[-1, 25], 1, Concat, [1]] # cat head P5 # 该层为D输出到d         # layer36
  - [-1, 3, C2f, [1024]] # 21 (P5/32-large) # 输出到Detect          # layer37

  - [[31, 34, 37], 1, Detect, [nc]] # Detect(P3, P4, P5)            # layer38
